package de.uni.bamberg.wiai.minf.forflow.datagenerator.view.graph;

import java.awt.BorderLayout;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 * This class has the job of visualizing the current selected
 * probability distribution with the given parameters.
 * We do not use a dull visualization, but a more sophisticated
 * chart of JFree chart.
 * The intention is to update the probability density function
 * each time values change, or the distribution does.
 * </p>
 * <font size=6><b>Probability density function</b></font></br>
 * Below is an example of such an chart. </br>
 * <img src="probabilityDensityFunction.jpg" alt="probabilityDensityFunction.jpg"/>
 * 
 * @author Michael Munz
 * @version 0.1
 * @since May/04/09
 */
public class Graph extends JPanel
{
	/**
	 * ID generated by Eclipse
	 */
	private static final long serialVersionUID = -1442092316415573358L;
	
	/**
	 * a swing component to register a JFreeChart object
	 */
	private ChartPanel chartPanel = null;
	
	/**
	 * default constructor.
	 */
	public Graph()
	{
		super(new BorderLayout());
		
		this.chartPanel = new ChartPanel(null);
		
		this.add(this.chartPanel, "Center");
	}
	
	/**
	 * draws the probability density function of any probability
	 * distribution. It helps to visualize how the values are
	 * distributed by the used distribution and the current
	 * settings.
	 * 
	 * @param title
	 * 		a description of the current distribution
	 * @param expectedValues
	 * 		idealized values for a probability distribution
	 * @param expectation
	 * 		E(X) = &mu;
	 * @param standardDeviation
	 * 		&sigma; = &radic;Var(X)
	 * @param isDiscrete
	 * 		is distribution discrete or continuous?
	 */
	public void generateGraph(String title,
							  Map<Double, Double> expectedValues,
							  double expectation,
							  double standardDeviation,
							  boolean isDiscrete)
	{
		XYSeriesCollection dataSet = new XYSeriesCollection();
		
		XYSeries expectedSeries = new XYSeries("Expected");
		
		dataSet.addSeries(expectedSeries);
		
		Entry<Double, Double> entry = null;
		
		for(Iterator<Entry<Double, Double>> i=expectedValues.entrySet().iterator(); i.hasNext();)
		{
			entry = i.next();
			
			expectedSeries.add((Number) entry.getKey(), (Number) entry.getValue());
		}
		
		JFreeChart chart = ChartFactory.createXYLineChart(title,
														  "values",
														  "f(x)",
														  dataSet,
														  PlotOrientation.VERTICAL,
														  false,
														  false,
														  false);
		
		XYPlot plot = (XYPlot) chart.getPlot();
		
		if(isDiscrete)
		{
			plot.setRenderer(new XYLineAndShapeRenderer());
		}
		else
		{
			XYSplineRenderer renderer = new XYSplineRenderer();
			
			renderer.setBaseShapesVisible(false);
			
			plot.setRenderer(renderer);
		}
		
		chartPanel.setChart(chart);
	}
}