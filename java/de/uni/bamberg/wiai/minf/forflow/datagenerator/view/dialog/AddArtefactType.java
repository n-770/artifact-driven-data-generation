package de.uni.bamberg.wiai.minf.forflow.datagenerator.view.dialog;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.KeyStroke;

import org.jdesktop.application.Action;

/**
 * This dialog gives the user the opportunity to add a new artefact type.
 * The typed in input will be verified and then passed on to
 * the parent frame.
 * 
 * @author Michael Munz
 * @version 0.1
 * @since Apr/18/09
 */
public class AddArtefactType extends JDialog
{
	/**
	 * ID generated by Eclipse
	 */
	private static final long serialVersionUID = 5076411458641635826L;

	/**
	 * reference to parent dialog
	 */
	private ChooseArtefacts dialog = null;
	
	/**
	 * constructor creates a new internal frame.
	 * 
	 * @param dialog
	 * 		reference of the parent dialog
	 */
	public AddArtefactType(ChooseArtefacts dialog)
	{
		this.dialog = dialog;
		
		this.initComponents();
		
		this.keyBinding();
		
		this.setLocationRelativeTo(this.dialog);
		
		this.formattedTextField_name.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent ae)
			{
				ok();
			}
		});
	}
	
	/**
	 * initializes the key binding on the focused window.
	 * When the <i>ESC</i> button has been pressed, the dialog
	 * is gonna be closed or disposed respectively.
	 */
	private void keyBinding()
	{
		// ESC
		this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
				KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
				"cancel");
		this.getRootPane().getActionMap().put("cancel", new EscAction());
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_headline = new javax.swing.JLabel();
        label_description = new javax.swing.JLabel();
        formattedTextField_name = new javax.swing.JFormattedTextField();
        label_artefactType = new javax.swing.JLabel();
        button_ok = new javax.swing.JButton();
        button_cancel = new javax.swing.JButton();
        checkBox_createDummyFile = new javax.swing.JCheckBox();
        label_dummyFile = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.uni.bamberg.wiai.minf.forflow.datagenerator.DataGenerator.class).getContext().getResourceMap(AddArtefactType.class);
        label_headline.setFont(resourceMap.getFont("label_headline.font")); // NOI18N
        label_headline.setText(resourceMap.getString("label_headline.text")); // NOI18N
        label_headline.setName("label_headline"); // NOI18N

        label_description.setText(resourceMap.getString("label_description.text")); // NOI18N
        label_description.setName("label_description"); // NOI18N

        formattedTextField_name.setText(resourceMap.getString("formattedTextField_name.text")); // NOI18N
        formattedTextField_name.setName("formattedTextField_name"); // NOI18N

        label_artefactType.setText(resourceMap.getString("label_artefactType.text")); // NOI18N
        label_artefactType.setName("label_artefactType"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(de.uni.bamberg.wiai.minf.forflow.datagenerator.DataGenerator.class).getContext().getActionMap(AddArtefactType.class, this);
        button_ok.setAction(actionMap.get("ok")); // NOI18N
        button_ok.setText(resourceMap.getString("button_ok.text")); // NOI18N
        button_ok.setName("button_ok"); // NOI18N

        button_cancel.setAction(actionMap.get("cancel")); // NOI18N
        button_cancel.setText(resourceMap.getString("button_cancel.text")); // NOI18N
        button_cancel.setName("button_cancel"); // NOI18N

        checkBox_createDummyFile.setText(resourceMap.getString("checkBox_createDummyFile.text")); // NOI18N
        checkBox_createDummyFile.setName("checkBox_createDummyFile"); // NOI18N

        label_dummyFile.setText(resourceMap.getString("label_dummyFile.text")); // NOI18N
        label_dummyFile.setName("label_dummyFile"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(label_headline)
                .addGap(95, 95, 95))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_description)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_artefactType)
                            .addComponent(label_dummyFile))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(formattedTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBox_createDummyFile))))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(button_ok)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_cancel)
                .addContainerGap(112, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {button_cancel, button_ok});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(label_headline)
                .addGap(18, 18, 18)
                .addComponent(label_description)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_artefactType)
                    .addComponent(formattedTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label_dummyFile)
                    .addComponent(checkBox_createDummyFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_ok)
                    .addComponent(button_cancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
     * accepts the typed in string as a new artefact type, if
     * and only if it passes the validation. 
     */
	@Action
	public void ok()
	{
		if(this.isStringValid(this.formattedTextField_name.getText()))
    	{
			boolean isDummy = this.checkBox_createDummyFile.isSelected() ? true : false;
			
    		this.dialog.setArtefactType(this.formattedTextField_name.getText(), isDummy);
    		
    		this.dispose();
    	}
	}
	
	/**
     * closes the fame without any changes left.
     * It doesn't matter what has been typed in, it is recognized.
     */
	@Action
	public void cancel()
	{
		this.dispose();
	}
	
	/**
     * checks the input of the text field.
     * Only strings are allowed.
     * 
     * @param text
     * 		text entered in text field
     * @return
     * 		true, if test passed.
     */
    private boolean isStringValid(String text)
    {
    	boolean valid = false;
    	
    	if((text != null) && (!text.equals("")))
    	{
	    	valid = true;
    	}
    	
    	return valid;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_cancel;
    private javax.swing.JButton button_ok;
    private javax.swing.JCheckBox checkBox_createDummyFile;
    private javax.swing.JFormattedTextField formattedTextField_name;
    private javax.swing.JLabel label_artefactType;
    private javax.swing.JLabel label_description;
    private javax.swing.JLabel label_dummyFile;
    private javax.swing.JLabel label_headline;
    // End of variables declaration//GEN-END:variables
	
	/**
     * Handles the action event, when button <i>ESC</i> has been pressed.
     * This is done by key binding to respond within the focused window.
     * </p>
     * When <i>ESC</i> is pressed, the dialog is gonna be disposed.
     * 
     * @author Michael Munz
     * @version 0.1
     * @since Apr/18/09
     */
    private class EscAction extends AbstractAction
    {
		/**
		 * ID generated by Eclipse
		 */
		private static final long serialVersionUID = 1716570860158519315L;

		@Override
		public void actionPerformed(ActionEvent ae)
		{
			dispose();
		}
    }
}