package de.uni.bamberg.wiai.minf.forflow.datagenerator.view;

import java.awt.Dimension;

import javax.swing.JPanel;

import de.uni.bamberg.wiai.minf.forflow.datagenerator.controller.datageneration.distribution.ProbabilityDistribution;
import de.uni.bamberg.wiai.minf.forflow.datagenerator.controller.datageneration.filltype.FillBehaviour;

/**
 * This is an abstract class for all probability distributions
 * to put their parameters in. This is helpful when it comes
 * to displaying in UI's. All subclasses have the same size
 * so that when different distributions are selected no
 * change in size occurs.
 * </p>
 * <font size=6><b>Parameters</b></font></br>
 * The main function of this panel is to make the parameters
 * public to the UI so users can make changes in the settings
 * like the <i>Expectation</i> or the <i>Variance</i>.
 * </p>
 * <font size=6><b>Example</b></font></br>
 * <img src="DistributionParameterPanel.jpg" alt="DistributionParameterPanel.jpg" />
 * 
 * @author Michael Munz
 * @version 0.1
 * @since May/07/09
 */
public abstract class DistributionParameterPanel extends JPanel
{
	/**
	 * ID generated by Eclipse
	 */
	private static final long serialVersionUID = -7028678641740266490L;
	
	/**
	 * the preferred width of this panel
	 */
	private int width = 154;
	
	/**
	 * the preferred height of this panel
	 */
	private int height = 97;
	
	/**
	 * reference to probability distribution.
	 * It is uses to notify about property changes
	 */
	private ProbabilityDistribution distribution = null;
	
	/**
	 * this is a reference to distribution panel.
	 * Remember, it holds all available distributions
	 * and knows how to pass on updates made down here.
	 * </p>
	 * The reference is necessary because value changes
	 * have to passed to the table model and the distribution
	 * panel is one part of that chain.
	 * </p>
	 * <font size=6><b>Chain of responsibility</b></font></br>
	 * <img src="ChainOfResponsibility_distributionPanel.jpg" 
	 * alt="ChainOfResponsibility_distributionPanel.jpg"/>
	 */
	private DistributionPanel panel = null;
	
	/**
	 * default constructor sets the preferred size
	 * to a predefined dimension. So all subclasses
	 * get the same size. This is important, because
	 * distribution panels are dynamically displayed.
	 */
	protected DistributionParameterPanel()
	{
		this.setPreferredSize(new Dimension(this.width, this.height));
	}
	
	/**
	 * constructor is passed the reference of parent
	 * panel. The reference is needed to pass update
	 * calls on. The parent panel in return may also
	 * pass it on again 'till the destination object
	 * has been reached.
	 * If you don't make use of this constructor please
	 * make sure you pass the reference on manually,
	 * by calling {@link #setDistributionPanel(DistributionPanel)},
	 * otherwise you get a null pointer exception.
	 * </p>
	 * <font size=6><b>Preferred Size</b></font></br>
	 * The preferred size is set by this constructor
	 * to a pre-defined dimension. This has the effect
	 * that all subclasses of it have the same initial
	 * width and height.
	 * 
	 * @param panel
	 * 		reference of panel one layer above this one
	 */
	protected DistributionParameterPanel(DistributionPanel panel)
	{
		this.panel = panel;
		
		this.setPreferredSize(new Dimension(this.width, this.height));
	}
	
	/**
	 * this is a reference to distribution panel.
	 * Remember, it holds all available distributions
	 * and knows how to pass on updates made down here.
	 * </p>
	 * The reference is necessary because value changes
	 * have to passed to the table model and the distribution
	 * panel is one part of that chain.
	 * </p>
	 * <font size=6><b>Chain of responsibility</b></font></br>
	 * <img src="ChainOfResponsibility_distributionPanel.jpg" 
	 * alt="ChainOfResponsibility_distributionPanel.jpg"/>
	 * 
	 * @param panel
	 * 		reference of distribution panel
	 */
	protected void setDistributionPanel(DistributionPanel panel)
	{
		this.panel = panel;
	}
	
	/**
	 * this is a reference to distribution panel.
	 * Remember, it holds all available distributions
	 * and knows how to pass on updates made down here.
	 * </p>
	 * The reference is necessary because value changes
	 * have to passed to the table model and the distribution
	 * panel is one part of that chain.
	 * </p>
	 * <font size=6><b>Chain of responsibility</b></font></br>
	 * <img src="ChainOfResponsibility_distributionPanel.jpg" 
	 * alt="ChainOfResponsibility_distributionPanel.jpg"/>
	 * 
	 * @return
	 * 		distribution panel
	 */
	protected DistributionPanel getDistributionPanel()
	{
		return this.panel;
	}
	
	/**
	 * sets the probability distribution. It is used to
	 * notify about property changes in parameters.
	 * 
	 * @param distribution
	 * 		that's the probability distribution to which this
	 * 		panels belongs.
	 */
	protected void setDistribution(ProbabilityDistribution distribution)
	{
		this.distribution = distribution;
	}
	
	/**
	 * gets the reference of the probability distribution
	 * to which this panel belongs. It is used to change
	 * settings in <i>Expectation</i> and <i>variance</i>.
	 * 
	 * @return
	 * 		probability distribution of this panel.
	 */
	protected ProbabilityDistribution getDistribution()
	{
		return this.distribution;
	}
	
	/**
	 * calculates the min and max value out
	 * of <i>N</i>. Those two values are needed
	 * to initialize the spinner models properly.
	 * We use min and max for the lower and upper
	 * bound of allowed values, because those values
	 * are available only.
	 * 
	 * @param N
	 * 		total amount of values. The value has
	 * 		been calculated out of the <i>value file</i>
	 * 		of {@link FillBehaviour}.
	 * @return
	 * 		int[min, max]
	 */
	protected int[] getMinMax(int N)
	{
		int[] min_max = new int[2];
		
		min_max[0] = 1;
		min_max[1] = N;
		
		return min_max;
	}
	
	/**
	 * gives the opportunity to reset the fields
	 * used as input. Subclasses <i>must</i> do
	 * this by its own, because its base class (this)
	 * doesn't know which ones are actually used.
	 */
	protected abstract void resetInputFields();
	
	/**
	 * a method to set values of this probability distribution.
	 * This method <i>must</i> be overwritten and adapted
	 * to the needs of subclasses.
	 * </p>
	 * The array uses double values, but if you need other
	 * types cast it down.
	 * 
	 * @param values
	 * 		the length of the array and what values are passed
	 * 		can not specified here.
	 */
	protected abstract void setValues(double[] values);
	
	@Override
	public void setPreferredSize(Dimension preferredSize)
	{
		super.setPreferredSize(preferredSize);
	}
}